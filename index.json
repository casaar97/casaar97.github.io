[{"authors":["admin"],"categories":null,"content":"Estudiante del Grado de Ingeniería Informática de la Universidad de Córdoba. Especialidad: Software.\n","date":1550599768,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1550599768,"objectID":"598b63dd58b43bce02403646f240cd3c","permalink":"https://casaar97.github.io/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"author","summary":"Estudiante del Grado de Ingeniería Informática de la Universidad de Córdoba. Especialidad: Software.","tags":null,"title":"Carlos Sánchez Arribas","type":"author"},{"authors":["admin"],"categories":null,"content":"Nelson Bighetti is a professor of artificial intelligence at the Stanford AI Lab. His research interests include distributed robotics, mobile computing and programmable matter. He leads the Robotic Neurobiology group, which develops self-reconfiguring robots, systems of self-organizing robots, and mobile sensor networks.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"3c6d3b026635189b3fe4915169b8e8a8","permalink":"https://casaar97.github.io/author/carlos/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/carlos/","section":"author","summary":"Nelson Bighetti is a professor of artificial intelligence at the Stanford AI Lab. His research interests include distributed robotics, mobile computing and programmable matter. He leads the Robotic Neurobiology group, which develops self-reconfiguring robots, systems of self-organizing robots, and mobile sensor networks.","tags":null,"title":"Carlos Sánchez Arribas","type":"author"},{"authors":null,"categories":null,"content":" Table of Contents    Introducción Instalación de Hugo  Instalación de Hugo en MacOs: Instalación de Hugo en Linux Instalación de Hugo en Ubuntu/Debian  Creación de un proyecto Seleccionar y descargar un tema Subida del proyecto a Github Pages    Introducción En este tutorial vamos a aprender a crear un sitio web con Hugo.\nHugo es un generador de sitios web estáticos escrito en Go, y es software libre.\nLos generadores de sitios web estáticos, aunque tienen limitaciones, son muy interesantes por generar sitios muy rápidos y seguros.\nEl tutorial estará dividido en varias partes para facilitar su comprensión.\n\nInstalación de Hugo Para ver otras formas de instalar Hugo visita el siguiente enlace: Instalar Hugo.\nInstalación de Hugo en MacOs: brew update \u0026amp;\u0026amp; brew install hugo  Instalación de Hugo en Linux snap install hugo  Instalación de Hugo en Ubuntu/Debian sudo apt-get install hugo   Se recomienda utilizar snap para instalar Hugo en Ubuntu ya que en caso de utilizar apt-get se instalará la versión 0.40 de Hugo, la cual ya es antigua.\n  Una vez que hayamos instalado Hugo, es recomendable utilizar el siguiente comando para comprobar que todo ha salido correctamente.\nAdemás obtendremos información sobre la versión de Hugo.\nhugo version  Creación de un proyecto El primer paso es la creación del directorio del proyecto, en nuestro caso lo llamaremos proyecto:\nhugo new site proyecto  Una vez creado el directorio del proyecto, observaremos una serie de directorios en su interior:\n archetypes: Plantillas para la creación de contenido. config.toml: Archivo de configuración del sitio (Puede estar en formato TOML, YAML o JSON). content: Archivos con el contenido ordenado en carpetas que siguen la misma jerarquía que mostrará el contenido en el sitio público. Dicho contenido puede estar en formato Markdown o HTML. data: Contenido adicional para incluir en el sitio web. Esta carpeta contiene archivos en formato TOML, YAML, JSON, incluso CSV, y constituye una especie de base de datos de contenido estructurado y accesible a través de un sistema de objetos y propiedades. layouts: Plantillas en HTML, shortcodes\u0026hellip; public: Contienen el sitio web listo para publicar generado a partir del contenido de /content, los archivos estáticos de /static y según las reglas y las plantillas definidas en el resto de carpetas de Hugo. static: Archivos estáticos como hojas de estilo o imágenes. themes: Temas instalados.  Además, Hugo puede funcionar con git como sistema de control de cambios, de manera que el proyecto completo sea un repositorio.\nPara ello una vez creado el sitio se puede crear el repositorio en la carpeta:\ncd proyecto git init  Seleccionar y descargar un tema Una vez hemos creado la carpeta de nuestro proyecto, vamos a seleccionar un tema para el mismo.\nLos temas se encuentran en la siguiente página.\nEn caso de querer descargar todos los temas utilizaremos el siguiente comando:\ngit clone --depth 1 --recursive https://github.com/gohugoio/hugoThemes.git themes  En caso de querer descargar un tema en concreto y una vez localizado el tema que queremos utilizar, usamos el comando git clone.\nEn nuestro caso vamos a descargar el tema \u0026ldquo;Coder\u0026rdquo; añadiéndolo como un submódulo a nuestro proyecto:\n Hay que estar situados dentro del directorio proyecto.\n  cd themes git submodule add https://github.com/luizdepra/hugo-coder.git themes/hugo-coder  Otra opción es clonar el tema:\ngit init (En caso de no haberlo hecho anteriormente) git clone https://github.com/jhu247/minimal-academic.git echo 'theme = \u0026quot;minimal-academic\u0026quot;' \u0026gt;\u0026gt; config.toml  Las instrucciones para descargar el tema suelen estar en la parte inferior de la página principal del tema, concretamente en la sección \u0026ldquo;Getting started\u0026rdquo;.\nLos temas contienen un subdirectorio, llamado exampleSite, con un sitio web de ejemplo realizado con dicho tema, el cual podemos usar de base para realizar nuestro proyecto.\nPara ver su funcionamiento, vamos a copiar los 3 subdirectorios y el fichero de configuración que encontramos en dicho directorio:\n layouts content static config.toml  Y los vamos a copiar dentro del directorio del proyecto (/proyecto en nuestro caso) reemplazando así los que han sido creados por defecto.\nUna vez hecho esto, ya podemos probar nuestro sitio web de manera local, para ello abrimos una terminal, nos situamos en el directorio del proyecto (/proyecto en nuestro caso) y ejecutamos en la terminal el comando:\nhugo server  Para ver nuestro sitio web, nos vamos a un navegador, escribimos localhost:1313 y ya podremos visualzar nuestro sitio web en local.\nCuando modifiquemos cualquiera de los archivos de nuestro proyecto, Hugo lo detectará y reconstruirá el sitio web de forma dinámica, ahorrandonos así tener que reiniciar el servicio y agilizando nuestro entorno de desarrollo local.\nSubida del proyecto a Github Pages Una vez que nuestro proyecto este terminado, podemos utilizar el servicio Github Pages, el cual nos proporcionara un dominio público a través del cual podremos acceder a nuestro sitio web siempre que lo deseemos.\nSería el equivalente a publicar nuestro sitio web en el servidor de producción.\nLo primero que debemos hacer es editar el fichero de configuración config.toml añadiendo la siguiente línea de código:\npublishDir = \u0026quot;docs\u0026quot;  Lo que hemos hecho con la anterior línea de código es especificar a Hugo que genere la versión web de nuestro proyecto en un directorio llamado \u0026ldquo;docs\u0026rdquo;.\nPara generar nuestro proyecto de forma que podamos subirlo como un sitio web funcional a Github Pages, utilizaremos el comando:\nhugo --theme=hugo-coder   El comando debe igualarse al nombre del directorio en el que se situa el tema, en este caso hugo-coder.\n  Esto creará un directorio llamado /docs dentro del directorio de nuestro proyecto con el contenido de nuestro sitio web en lenguajes como HTML, CSS o JSON, de manera que podamos subirlo a un repositorio y que github lo sirva como un sitio web accesible a través de un dominio público.\nAdemás vamos a añadir al .gitignore la siguiente línea de código:\necho \u0026quot;/themes/\u0026quot; \u0026gt;\u0026gt; .gitignore  De esta forma no se subirá el directorio /themes, para evitar conflictos.\nEl siguiente paso es ir a github y crear un repositorio.\n No crear README para evitar posibles conflictos.\n  En nuestro caso vamos a crear un repositorio llamado prueba.\nUna vez creemos este repositorio, es importante que nos quedemos con su URL ya que será necesaria para indicar el respositorio donde realizar la subida, en mi caso:\nhttps://github.com/casaar97/prueba.git  Nos situamos ahora con la terminal en el directorio de nuestro proyecto y ejecutamos los siguientes comandos:\ngit status git add . git commit -m \u0026quot;Primera subida\u0026quot;  Lo que hemos hecho con estos 3 comandos es basicamente hacer un primer commit de todos los ficheros del directorio del proyecto.\nUna vez hecho esto, procederemos a su subida mediante los siguientes comandos:\ngit remote add origin https://github.com/casaar97/prueba.git git remote -v (Verificamos la subida) git push -u origin master  Una vez subido el repositorio, accedemos a las opciones del repositorio, e indicamos dentro de la sección Github Pages, en la opción Source, la segunda opción: master brach /docs folder para así indicar el directorio en el que se ha generado nuestro sitio web.\nSi queremos hacer modificaciones, lo suyo es probarlas primero en local (Hugo Server y localhost:1313) y una vez comprobado que funcionan correctamente, generar de nuevo el directorio /docs y realizar una nueva subida mediante los siguientes comandos:\nhugo --theme=hugo-coder git add . git commit -m \u0026quot;Mensaje\u0026quot; git push origin master  ","date":1551139200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1551139200,"objectID":"f42ef05068100322e2db8ec23a02ee70","permalink":"https://casaar97.github.io/tutorial/creandounsitiowebconhugo/","publishdate":"2019-02-26T00:00:00Z","relpermalink":"/tutorial/creandounsitiowebconhugo/","section":"tutorial","summary":"Table of Contents    Introducción Instalación de Hugo  Instalación de Hugo en MacOs: Instalación de Hugo en Linux Instalación de Hugo en Ubuntu/Debian  Creación de un proyecto Seleccionar y descargar un tema Subida del proyecto a Github Pages    Introducción En este tutorial vamos a aprender a crear un sitio web con Hugo.\nHugo es un generador de sitios web estáticos escrito en Go, y es software libre.","tags":null,"title":"Creando un sitio web con Hugo","type":"tutorial"}]